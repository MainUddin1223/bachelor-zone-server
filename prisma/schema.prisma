generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Auth {
  id           Int            @id @default(autoincrement())
  phone        String         @unique
  password     String
  name         String
  role         Role           @default(user)
  is_deleted   Boolean        @default(false)
  teams        Team[]
  Order        Order[]
  Transaction  Transaction[]
  UserInfo     UserInfo[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  supplierInfo SupplierInfo[]

  @@map("auth")
}

model UserInfo {
  id          Int      @id @default(autoincrement())
  virtual_id  String
  address_id  Int
  is_claimed  Boolean  @default(false)
  user_id     Int      @unique
  img         String?
  user        Auth     @relation(fields: [user_id], references: [id])
  address     Address  @relation(fields: [address_id], references: [id])
  is_in_team  Boolean  @default(false)
  Balance     Int      @default(0)
  team_id     Int
  team_member Team     @relation(fields: [team_id], references: [id])
  due         Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("userInfo")
}

model SupplierInfo {
  id          Int           @id @default(autoincrement())
  user_id     Int
  user        Auth          @relation(fields: [user_id], references: [id])
  contact_no  String
  name        String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  address     Address[]
  Order       Order[]
  Transaction Transaction[]

  @@map("supplierInfo")
}

model Address {
  id          Int          @id @default(autoincrement())
  address     String
  supplier_id Int
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  supplier    SupplierInfo @relation(fields: [supplier_id], references: [id])
  Team        Team[]
  UserInfo    UserInfo[]

  @@map("address")
}

model Team {
  id         Int        @id @default(autoincrement())
  name       String
  address_id Int
  member     Int        @default(0)
  due_boxes  Int        @default(0)
  leader_id  Int        @unique
  is_deleted Boolean    @default(false)
  leader     Auth       @relation(fields: [leader_id], references: [id])
  address    Address?   @relation(fields: [address_id], references: [id])
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  order      Order[]
  userInfo   UserInfo[]

  @@map("team")
}

model Order {
  id            Int          @id @default(autoincrement())
  user_id       Int
  team_id       Int
  supplier_id   Int
  price         Int          @default(89)
  status        OrderStatus  @default(pending)
  pickup_status PickupStatus @default(disable)
  delivery_date DateTime
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  supplier      SupplierInfo @relation(fields: [supplier_id], references: [id])
  team          Team         @relation(fields: [team_id], references: [id])
  user          Auth         @relation(fields: [user_id], references: [id])

  @@map("orders")
}

model Transaction {
  id               Int             @id @default(autoincrement())
  user_id          Int
  receiver_id      Int
  amount           Int
  description      String
  date             DateTime        @default(now())
  status           PaymentStatus   @default(paid)
  transaction_type TransactionType
  user             Auth            @relation(fields: [user_id], references: [id])
  receiver         SupplierInfo    @relation(fields: [receiver_id], references: [id])
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  @@map("transactions")
}

model Expenses {
  id           Int      @id @default(autoincrement())
  product_name String
  quantity     String
  amount       Int
  date         DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("expenses")
}

enum Role {
  admin
  user
  supplier
}

enum OrderStatus {
  received
  pending
  canceled
}

enum TransactionType {
  deposit
  refund
}

enum PaymentStatus {
  paid
  pending
}

enum PickupStatus {
  enable
  disable
  received
}
